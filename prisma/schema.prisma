generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String          @id @default(uuid())
  name        String          @db.VarChar(255)
  cpf         String          @unique @db.VarChar(255)
  email       String?         @db.VarChar(255)
  phone       String          @db.VarChar(255)
  role        Roles           @default(INVESTOR)
  password    String          @db.VarChar(255)
  created_at  DateTime        @default(now())
  deleted_at  DateTime?
  companyId   String?
  company     Company?        @relation(fields: [companyId], references: [id], onDelete: SetNull)
  investments Investment[]    @relation("userInvestment")
  sales       Investment[]    @relation("userSeller")
  projects    ProjectSeller[] @relation("sellerProject")
}

enum Roles {
  ZICREDIT
  SELLER
  COMPANY
  INVESTOR
}

model Company {
  id         String    @id @default(uuid())
  name       String    @db.VarChar(255)
  cnpj       String    @db.VarChar(255)
  address    String    @db.Text
  phone      String    @db.VarChar(255)
  email      String?   @db.VarChar(255)
  bankData   String    @db.Text
  logo       String    @db.Text
  created_at DateTime  @default(now())
  deleted_at DateTime?
  users      User[]
  projects   Project[]
}

model Investment {
  id             String          @id @default(uuid())
  amountInvested Float
  projectId      String
  userId         String
  sellerId       String
  bankData       String          @db.Text
  appreciation   Float           @default(0)
  created_at     DateTime        @default(now())
  deleted_at     DateTime?
  user           User            @relation(name: "userInvestment", fields: [userId], references: [id])
  seller         User            @relation(name: "userSeller", fields: [sellerId], references: [id])
  project        Project         @relation(fields: [projectId], references: [id])
  InvestmentLog  InvestmentLog[]
}

model InvestmentLog {
  id             String     @id @default(uuid())
  investmentId   String
  amountChanged  Float
  newTotalAmount Float
  type           LogType
  createdAt      DateTime   @default(now())
  investment     Investment @relation(fields: [investmentId], references: [id])

  @@index([investmentId], name: "idx_investment_log")
}

enum LogType {
  INCREASE
  DECREASE
}

model Project {
  id            String          @id @default(uuid())
  name          String          @db.VarChar(255)
  location      String          @db.Text
  totalValue    Float
  cover         String          @db.Text
  companyId     String
  created_at    DateTime        @default(now())
  deleted_at    DateTime?
  company       Company         @relation(fields: [companyId], references: [id], onDelete: Cascade)
  investments   Investment[]
  ProjectSeller ProjectSeller[]
  Report        Report[]
}

model ProjectSeller {
  projectId String
  sellerId  String

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  seller  User    @relation(name: "sellerProject", fields: [sellerId], references: [id], onDelete: Cascade)

  @@id([projectId, sellerId])
}

model Report {
  id         String   @id @default(uuid())
  file       String   @db.Text
  projectId  String
  created_at DateTime @default(now())
  project    Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}
